//Code that allows the player to move using wsad keys or the arrow keys and using the spacebar to jump

#include "Player1.h"
#include "GameFramework/SpringArmComponent.h"
#include "Camera/CameraComponent.h"

// Constructor
APlayer1::APlayer1()
{
    // Set this character to call Tick() every frame
    PrimaryActorTick.bCanEverTick = true;

    // Create and attach a spring arm component
    SpringArmComponent = CreateDefaultSubobject<USpringArmComponent>(TEXT("SpringArmComponent"));
    SpringArmComponent->SetupAttachment(RootComponent);
    SpringArmComponent->TargetArmLength = 300.0f; // Adjust as needed
    SpringArmComponent->bUsePawnControlRotation = true;

    // Create and attach a camera component
    CameraComponent = CreateDefaultSubobject<UCameraComponent>(TEXT("CameraComponent"));
    CameraComponent->SetupAttachment(SpringArmComponent);

    // Enable player input
    bUseControllerRotationYaw = false;
    bUseControllerRotationPitch = false;
    bUseControllerRotationRoll = false;
    bAddDefaultMovementBindings = false; // We'll handle input manually
}

// Called to bind functionality to input
void APlayer1::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
    Super::SetupPlayerInputComponent(PlayerInputComponent);

    // Bind axis mappings
    PlayerInputComponent->BindAxis("MoveForward", this, &APlayer1::MoveForward);
    PlayerInputComponent->BindAxis("MoveRight", this, &APlayer1::MoveRight);

    // Bind jump action
    PlayerInputComponent->BindAction("Jump", IE_Pressed, this, &APlayer1::StartJump);
    PlayerInputComponent->BindAction("Jump", IE_Released, this, &APlayer1::StopJump);
}

// Move the character forward/backward
void APlayer1::MoveForward(float Value)
{
    if (Controller && Value != 0.0f)
    {
        const FVector ForwardDirection = GetActorForwardVector();
        AddMovementInput(ForwardDirection, Value);
    }
}

// Move the character left/right
void APlayer1::MoveRight(float Value)
{
    if (Controller && Value != 0.0f)
    {
        const FVector RightDirection = GetActorRightVector();
        AddMovementInput(RightDirection, Value);
    }
}

// Start the jump action
void APlayer1::StartJump()
{
    bPressedJump = true;
}

// Stop the jump action
void APlayer1::StopJump()
{
    bPressedJump = false;
}
